@startuml
abstract class Usuario {
    +id: int
    +nombre: String
    +tipo: String
}

Usuario <|-- Administrador
Usuario <|-- Encargado
Usuario <|-- Empleado

class Administrador {
    -crearUsuario(): void
    -personalizarMensaje(): void
}

class Encargado {
    -registrarProveedor(): void
    -registrarProducto(): void
    -registrarCategoria(): void
    -listarProductos(): List<Producto>
    -listarProveedores(): List<Proveedor>
    -listarCategorias(): List<Categoria>
    -eliminarProducto(): void
    -eliminarProveedor(): void
    -eliminarCategoria(): void
    -consultarProducto(): Producto
    -consultarProveedor(): Proveedor
    -modificarProveedor(): void
    -modificarProducto(): void
    -modificarCategoria():void
}

class Empleado {
    -registrarVenta(): void
    -listarProductos(): List<Producto>
    -consultarProducto(): Producto
}

class Categoria {
    -getters(): void
    -setters(): void
}

class Producto {
    -getters(): void
    -setters(): void
}

class Proveedor {
    -getters(): void
    -setters(): void
}

class Categoria {
    +id: int
    +nombre: String
    +descripcion: String
    +fechaDeCreacion: Date
    +fechaDeModificacion: Date
}

class Venta {
    -getters(): void
    -setters(): void
}

class Producto {
    +id: int
    +nombre: String
    +descripcion: String
    +unidadDeMedida: String
    +stock: int
    +precioUnitario: double
    +precio: double
    +categoria: Categoria
    +limiteMinimo: int
    +cantidadDeReposición: int
    +fechaDeCreacion: Date
    +fechaDeModificacion: Date
}

Producto "1" --> "1" Categoria

class Proveedor {
    +id: int
    +nombre: String
    +email:
    +categoria: Categoria
    +fechaDeCreacion: Date
    +fechaDeModificacion: Date
}

Proveedor "1" --> "1" Categoria

class Venta {
    +id: int
    +fecha: Date
    +emailCliente: String
    +productos: List<Productos>
    +total: double
}

Venta "1" --> "1" Empleado
Venta "1" --> "*" Producto

interface IMenu {
    +mostrar(): void
}


class MenuEmpleado {
    +empleado: Empleado
    -mostrar(): void
}

MenuEmpleado --> "1" Empleado

class MenuEncargado {
    +encargado: Encargado
    -mostrar(): void
}

MenuEncargado --> "1" Encargado

class MenuAdmin {
    +administrador: Administrador
    -mostrar(): void
}

MenuAdmin --> "1" Administrador

' Relación de implementación
IMenu <|.. MenuEmpleado
IMenu <|.. MenuEncargado
IMenu <|.. MenuAdmin

class RepoCategoria {
    +categorias: List<Categoria>
    -existeCategoria(String): boolean
}

class RepoProducto {
    +productos: List<Producto>
    -obtenerTodos(): List<Producto>
    -agregar(Producto): void
    -buscar(String): Producto
    -modificar(Producto, String, String, double): void
    -eliminar(Producto): void
    -actualizarStock(HashMap<String, Integer>): List<Producto>
}

class RepoProveedor {
    +proveedores: List<Proveedor>
    -obtenerTodos(): List<Proveedor>
    -buscar(String): Proveedor
    -agregar(Proveedor): void
    -eliminar(Proveedor): void
    -modificar(Proveedor, String): void
}

class RepoUsuario {
    +usuarios: List<Usuario>
    -existe(String): boolean
    -buscar(String): Usuario
    -crear(Usuario): void
}

class RepoVenta {
    +ventas: List<Venta>
}

' *-- para demotrar que se componen de colecciones de esas clases.

RepoCategoria *-- Categoria
RepoProducto *-- Producto
RepoProveedor *-- Proveedor
RepoUsuario *-- Usuario
RepoVenta *-- Venta

Empleado --> RepoProducto
Administrador --> RepoUsuario
Encargado --> RepoCategoria
Encargado --> RepoProducto
Encargado --> RepoProveedor

@enduml